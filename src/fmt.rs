use git2::Repository;

use std::fs::File;
use std::io::{self, Write};

use crate::CommitDesc;

/// Markdown formatter for changelogs.
pub struct MdFormatter<'r> {
    file: &'r mut File,
    repo: &'r Repository, // TODO: Settings and configuration
    config: FormatConfig,
}

/// Formatting configuration.
pub struct FormatConfig {
    /// Whether to give credit to `changen` for generating.
    ///
    /// Simply adds a line to the header:
    /// ```
    /// > Generated by `changen`.
    /// ```
    add_credit: bool,
    /// Branch the changelog is generated from.
    ///
    /// Used for GitHub links.
    remote: String,
}

impl Default for FormatConfig {
    fn default() -> Self {
        Self {
            add_credit: true,
            remote: "origin".into(),
        }
    }
}

// TODO?: Move to a trait
impl<'r> MdFormatter<'r> {
    pub fn new(file: &'r mut File, repo: &'r Repository) -> Self {
        Self {
            file,
            repo,
            config: Default::default(),
        }
    }

    pub fn config(self, config: FormatConfig) -> Self {
        Self { config, ..self }
    }

    pub fn start_changelog(&mut self) -> io::Result<usize> {
        let mut n = self.file.write("# Changelog\n".as_bytes())?;

        if self.config.add_credit {
            // TODO: Add link
            n += self
                .file
                .write("\n> Generated by `changen`.\n".as_bytes())?;
        }

        Ok(n)
    }

    pub fn write_tag(&mut self, tag: &str) -> io::Result<usize> {
        // TODO?: Add link
        self.file.write(format!("\n## {}\n", tag).as_bytes())
    }

    // TODO?: Author
    pub fn write_commit(&mut self, commit: &CommitDesc) -> io::Result<usize> {
        let msg = commit
            .message()
            .msg()
            .chars()
            .take_while(|c| *c != '\n')
            .collect::<String>();
        let hash_short = format!("`{:.7}`", commit.id());
        // HACK: Remote
        let hash_url = {
            let remote = self.repo.find_remote(&self.config.remote).unwrap();
            let url = remote.url().unwrap();
            // HACK? idk man
            let url = match url.strip_suffix(".git") {
                None => url,
                Some(x) => x,
            };

            format!("{}/commit/{}", url, commit.id())
        };
        let tag = match commit.message().tag() {
            None => {
                return self
                    .file
                    .write(format!("- {msg} [{hash_short}]({hash_url})\n").as_bytes());
            }
            Some(tag) if tag == "chore" => return Ok(0),
            Some(tag) => format!("**{}** ", tag),
        };
        let scope = match commit.message().scope() {
            None => "".into(),
            Some(scope) => format!("_{}_ ", scope),
        };
        let line = if commit.message().is_breaking() {
            format!("- {tag}{scope}: <u>{msg}</u> [{hash_short}]({hash_url})\n")
        } else {
            format!("- {tag}{scope}: {msg} [{hash_short}]({hash_url})\n")
        };

        // HACK?
        self.file.write(line.as_bytes())
    }
}
